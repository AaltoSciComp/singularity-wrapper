#!/usr/bin/env python3
#
# MIT License
#
# Copyright (c) 2020 Aalto Science IT
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
#     The above copyright notice and this permission notice shall be included in all
#     copies or substantial portions of the Software.
#
#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#     SOFTWARE.

import os
import sys
import re
import subprocess as sp
import textwrap
from argparse import ArgumentParser
from distutils.spawn import find_executable
from distutils.util import strtobool

def confirm(question: str, default: bool=False):
    """ This helper function asks for confirmation from the user.

    Args:
        question: Question to ask.
        default:  Default answer (yes or no).
    """

    print(40*'-' + '\n{0}\n'.format(question) + 40*'-')

    confirm_txt = 'Please confirm: {0}'.format('[Y/n]' if default else '[y/N]')
    while True:
        print(confirm_txt)
        try:
            answer = input()
            if len(answer) == 0:
                answer = default
            else:
                answer = strtobool(answer)
            break
        except ValueError:
            print('Invalid answer!')
    return bool(answer)

def run_subprocess(command: list, output_filename: str='/dev/null'):
    with open(output_filename, 'w') as output_file:
        run_result = sp.run(
                command,
                stdout=sp.PIPE,
                stderr=sp.STDOUT,
                universal_newlines=True)
        if run_result.returncode != 0:
            print('Obtained return code: %d\nstdout & stderr are below.' % run_result.returncode)
            print(40*'-')
            print(run_result.stdout)
        output_file.write(run_result.stdout)
    return bool(run_result.returncode == 0)

def pass_function(*args, **kwargs):
    return False

def get_docker_url_match(url):
    url_match = re.search('.*[/](?P<name>[^/]+)[:](?P<version>[^/]+)$', url)
    return url_match

def check_docker_url(url):
    is_proper_url = get_docker_url_match(url) is not None
    return is_proper_url

def get_image_version(url):
    version_match = get_docker_url_match(url)
    return version_match.group('version')

def get_image_name(url):
    version_match = get_docker_url_match(url)
    return version_match.group('name')

def tag_to_url(tag):
    return 'docker://%s' % tag

class SingularityCreator:

    def __init__(self, wrapper, modulepath):
        self.wrapper = os.path.realpath(wrapper)
        self.modulepath = os.path.realpath(modulepath)

    def create_image_from_cmd(self, cmd):
        cmd_str = ' '.join(cmd)
        print('Building image with command: %s' % cmd_str)
        return run_subprocess(cmd, 'singularity_build.out')

    def check_image_wrapper(self, image, f):
        """ This wrapper checks whether an image exists."""
        correct_image_extension = os.path.splitext(image)[1] == '.sif'
        if not correct_image_extension:
            correct_image_extension = confirm(
                'Image file does not have the correct extension (.sif). Continue?',
                default=False)
        if not correct_image_extension:
            print('Skipping build for image "%s".' % image)
            return pass_function
        else:
            return self.check_file_wrapper('Image', image, f)

    def check_modulefile_wrapper(self, modulefile, f):
        """ This wrapper checks whether a module file exists."""
        return self.check_file_wrapper('Module file', modulefile, f, default=True)

    def check_file_wrapper(self, name, filename, f, default=False):
        """This wrapper checks whether a file exists."""

        overwrite = not os.path.exists(filename)
        if not overwrite:
            overwrite = confirm('%s "%s" exists. Overwrite?' % (name, filename), default=default)
        if overwrite:
            return f
        else:
            print('Will not overwrite the %s.' % name.lower())
            return pass_function

    def create_image_from_url(self, image, url):

        print('Creating singularity image "{0}" from url: {1}'.format(image, url))
        command = ['singularity', 'pull', '-F', image, url]

        return self.check_image_wrapper(image, self.create_image_from_cmd)(command)

    def write_modulefile(self, modulefile, contents):

        modulefolder = os.path.dirname(modulefile)
        if not os.path.isdir(modulefolder):
            print('Creating folder "%s" for the modulefile.' % modulefolder)
            os.makedirs(modulefolder)

        print('Writing module file to "%s"' % modulefile)
        with open(modulefile, 'w') as mf:
            mf.write(contents)

    def create_modulefile(self, name, version, image, flags=None):
        template = """
            -- -*- lua -*-
            --
            -- Module file created by Singularity builder
            --

            whatis([[Name : {name}]])
            whatis([[Version : {version}]])
            help([[This is a singularity image created with create_singularity_module-script.]])

            prepend_path("PATH", "{wrapper_path}")

            family("singularity")

            local local_flags=os.getenv("SING_FLAGS")
            local sing_flags=" {flags} "


            if local_flags then
                pushenv("SING_FLAGS", local_flags .. sing_flags)
            else
                setenv("SING_FLAGS", sing_flags)
            end

            pushenv("SING_IMAGE", "{image_file}")
        """

        format_dict = {
            'name': name,
            'version': version,
            'wrapper_path': os.path.dirname(self.wrapper),
            'flags': ' '.join(flags),
            'image_file': os.path.realpath(image),
        }

        filled_template = textwrap.dedent(template).format(**format_dict)

        modulefile = os.path.join(self.modulepath, name, version + '.lua')

        moduleconfirm = confirm('Writing modulefile to "%s". Is this ok?' % modulefile, default=True)

        if moduleconfirm:
            return self.check_modulefile_wrapper(modulefile, self.write_modulefile)(modulefile, filled_template)
        else:
            print('Skipping module file creation.')


DEFAULT_FLAGS = {
        'unknown': [],
        'triton': [ '-B /l:/l', '-B /scratch:/scratch', '-B /m:/m' ],
        'aalto_desktop': [ '-B /l:/l', '-B /m:/m' ],
}

if __name__=="__main__":

    try:
        SINGULARITY = find_executable('singularity')

        if not SINGULARITY:
            print('"singularity"-executable not found in $PATH!')
            sys.exit(1)

        PARSER = ArgumentParser()

        PARSER.add_argument('image', type=str, nargs=1,
                            help='Path for the new singularity image')
        PARSER.add_argument('-w', '--wrapper', type=str, default=None,
                            help='Path to singularity_wrapper')
        PARSER.add_argument('-s', '--target-system', type=str,
                            default='triton',
                            choices=('unknown', 'triton','aalto_desktop'),
                            help='Path to singularity_wrapper')
        PARSER.add_argument('-m', '--modulepath', type=str, default=None,
                            help='Path to module files (default: modules)')
        PARSER.add_argument('-l', '--module-version', type=str, default=None,
                            help='Version for the module (default: image tag)')
        PARSER.add_argument('-n', '--module-name', type=str, default=None,
                            help='Name for the module (default: image name)')
        PARSER.add_argument('-g', '--gpu', action='store_true', default=False,
                            help='Enable GPU for the image (default: False)')
        PARSER.add_argument('-f', '--flags', type=str, default=None,
                            help=('Additional singularity flags for the module '
                                  '(e.g. "-B /folder:/folder")'))

        SOURCE_GRP = PARSER.add_mutually_exclusive_group()
        SOURCE_GRP.add_argument('-d', '--docker', type=str, default=None,
                                help='Docker user/image:tag to use for the build')
        SOURCE_GRP.add_argument('-u', '--url', type=str, default=None,
                                help='Docker/Singularity URL of the image')

        DEFAULT_WRAPPER = '/share/apps/singularity/wrapper/singularity_wrapper'
        DEFAULT_MODULEPATH = os.path.join(os.getcwd(), 'modules')

        # Parse arguments
        ARGS = PARSER.parse_args()

        # Get wrapper path
        WRAPPER = ARGS.wrapper
        if not WRAPPER:
            WRAPPER = find_executable('singularity_wrapper')
        if not WRAPPER:
            WRAPPER = DEFAULT_WRAPPER

        # Get modulepath
        MODULEPATH = ARGS.modulepath
        if not MODULEPATH:
            MODULEPATH = DEFAULT_MODULEPATH

        # Get image path
        IMAGE = ARGS.image[0]

        # Determine build URL from either url- or docker-parameter
        URL=ARGS.url
        TAG=ARGS.docker
        if TAG:
            URL=tag_to_url(TAG)

        if not check_docker_url(URL):
            print(('\nURL "%s" does not seem like a valid URL '
                   'for doing singularity build.\n\nStopping build!') % URL)
            sys.exit(1)

        # Determine module name and version
        MODULE_NAME = ARGS.module_name
        if not MODULE_NAME:
            MODULE_NAME = get_image_name(URL)

        MODULE_VERSION = ARGS.module_version
        if not MODULE_VERSION:
            MODULE_VERSION = get_image_version(URL)

        # Determine module flags
        FLAGS = DEFAULT_FLAGS[ARGS.target_system]

        if ARGS.flags:
            FLAGS = FLAGS + [ ' %s ' % ARGS.flags ]

        if ARGS.gpu:
            FLAGS = FLAGS + ['--nv']

        # Start the build
        SC = SingularityCreator(WRAPPER, MODULEPATH)

        BUILD_RESULT = SC.create_image_from_url(IMAGE, URL)

        if BUILD_RESULT:
            print('Singularity image build was successful.')
        else:
            BUILD_RESULT = confirm(
                'Singularity image build was unsuccessful. Continue with module creation?',
                default=False)

        if BUILD_RESULT:
            SC.create_modulefile(MODULE_NAME, MODULE_VERSION, IMAGE, flags=FLAGS)
    except KeyboardInterrupt:
        print('\nStopping program execution due to user request!')
